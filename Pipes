/*
Student name: Jaxon Talbert
Student NetID: JRT524
Compiler Used: Text Editor/Ubuntu/Oracle
Program Description: The following program uses a pipe to transfer a string between parent and child processes
*/

#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/wait.h>

#define BUF_SIZE 1024

int main()
{	
	int fd[2];
	char answer[BUF_SIZE];
	pid_t childPID;
	
	//pipe fd
	if (pipe(fd) == -1)
	{
		perror("pipe");
		exit(EXIT_FAILURE);
	}
	
	//fork
	childPID = fork();
	
	switch(childPID)
	{
		case -1:
			perror("fork");
			exit(EXIT_FAILURE);
		
		case 0:
			
			//close write end
			close(fd[1]);
			char answer[BUF_SIZE];
			
			//read from pipe
			read(fd[0], &answer, BUF_SIZE);
			//print child: followed by string	
			printf("Child: %s <data received>\n", answer);
				
			//close read end
			close(fd[0]);
			
			exit(EXIT_SUCCESS);
			
		default:
		
			//close read end
			close(fd[0]);
			
			printf("Please enter text at the parent: ");
			//read in answer until a \n
			scanf("%[^\n]", answer);
				
			//write to answer to pipe
			write(fd[1], answer, strlen(answer) + 1);
				
			//print parent: followed by string 
			printf("Parent: %s\n", answer); 
				
			//close write end
			close(fd[1]);
			exit(EXIT_SUCCESS);		
	}	
}
